{"version":3,"sources":["styled/functions.js","styled/global.styles.js","components/App/App.styles.js","styled/styled.components.js","components/Container/Container.styles.js","components/Map/MapContainer.js","components/Container/Container.js","components/App/App.js","serviceWorker.js","index.js"],"names":["size","mobile","mobileM","mobileL","tablet","tabletL","laptop","deviceMin","Object","keys","reduce","acc","key","style","concat","GlobalStyle","createGlobalStyle","_templateObject","_templateObject2","_templateObject3","_templateObject4","AppWrapper","styled","div","App_styles_templateObject","_ref","arguments","length","undefined","_ref$d","d","_ref$j","j","_ref$a","a","flexbox","ContWrapper","Container_styles_templateObject","Header","Container_styles_templateObject2","MapCont","Container_styles_templateObject3","List","ul","Container_styles_templateObject4","ListItem","li","_templateObject5","MapContainer","state","center","this","getLatLng","prevProps","props","location","_this2","axios","get","params","address","process","then","res","data","results","geometry","setState","react_default","createElement","dist","google","zoom","position","Component","GoogleApiWrapper","apiKey","Container","countries","cities","companies","getLocation","loadData","response","_this","sortData","Customers","groupeCities","groupeCompanies","customers","firstCountry","firstCities","renderListCountries","renderListCities","renderListCompanies","renderMapContainer","catch","err","console","log","resProp","sortProp","sortOrder","obj","n","forEach","i","k","add","Set","Array","from","entries","sort","b","arrCities","_loop","filter","city","includes","map","tmp","showCitiesHandler","e","persist","target","innerText","showCompaniesHandler","getLocationHandler","CompanyName","innerHTML","onClick","company","Address","Region","City","PostalCode","Country","join","Map_MapContainer","_this$state","App","Fragment","components_Container_Container","global_styles","Boolean","window","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1da6880.chunk.js","sourcesContent":["const size = {\r\n  mobile: '320px',\r\n  mobileM: '375px',\r\n  mobileL: '425px',\r\n  tablet: '680px',\r\n  tabletL: '880px',\r\n  laptop: '1080px',\r\n}\r\nexport const deviceMin = Object.keys(size).reduce((acc, key) => {\r\n  acc[key] = style => `\r\n     @media (min-width: ${size[key]}) {\r\n       ${style};\r\n     }\r\n   `\r\n  return acc\r\n}, {})\r\nexport const deviceMax = Object.keys(size).reduce((acc, key) => {\r\n  acc[key] = style => `\r\n     @media (max-width: ${size[key]}) {\r\n       ${style};\r\n     }\r\n   `\r\n  return acc\r\n}, {})\r\n\r\nexport const flexbox = ({ d = 'row', j = 'center', a = 'center' } = {}) => `\r\n    display:flex;\r\n    flex-direction:${d};\r\n    justify-content:${j};\r\n    align-items:${a};     \r\n`","import 'styled-components'\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nimport { deviceMin } from './functions'\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n   html {\r\n      font-size: 10px;\r\n      font-family: 'Roboto', Arial, sans-serif;\r\n      ${deviceMin.mobileM`\r\n            font-size: 12px;\r\n      `}\r\n      ${deviceMin.mobileL`\r\n            font-size: 14px;\r\n      `}\r\n      ${deviceMin.tablet`\r\n            font-size: 16px;\r\n      `}\r\n   }\r\n\r\n   body {\r\n      font-family: 'Roboto', Arial, sans-serif;\r\n      text-decoration: none;\r\n      font-size: 10px;\r\n      margin: 0;\r\n      padding: 0;\r\n      direction: ltr;\r\n      border: none;\r\n      width: 100%;\r\n      box-sizing: border-box;\r\n\r\n      \r\n   }\r\n\r\n   * {\r\n      margin: 0;\r\n      padding: 0;\r\n      border:none;\r\n      outline:none;\r\n      box-sizing: border-box;\r\n   }\r\n\r\n   button {\r\n      text-decoration: none;\r\n      border: none;\r\n      -webkit-appearance: none;\r\n      background-color: transparent;\r\n   }\r\n\r\n   span, a, ul, li, div {\r\n      text-decoration: none;\r\n      list-style-type: none; \r\n   }\r\n\r\n   input:focus,\r\n   input,\r\n   select:focus,\r\n   textarea:focus,\r\n   button:focus,\r\n   button,\r\n   textarea {\r\n      outline: none;\r\n      border: none; \r\n   }\r\n\r\n   button {\r\n   cursor: pointer; \r\n   }\r\n   `\r\n\r\nexport default GlobalStyle\r\n","import styled from 'styled-components'\r\n\r\nimport { BGcolor } from '../../styled/styled.components'\r\nimport { flexbox} from '../../styled/functions'\r\n\r\nexport const AppWrapper = styled.div`\r\n      ${ flexbox({  }) }\r\n      height: 100%;\r\n      width: 100%;\r\n      position: absolute;\r\n      top: 0px;\r\n      left: 0px;\r\n      background-color: ${BGcolor};\r\n      overflow: hidden;\r\n`\r\n\r\n","export const BGcolor   = '#f8f8f8'\r\nexport const blueColor = '#007aff'\r\nexport const whiteColor = '#FFFFFF'\r\nexport const borderColor = '#bfbfbf'","import styled from 'styled-components'\r\n\r\nimport { whiteColor, borderColor, blueColor } from '../../styled/styled.components'\r\n\r\nexport const ContWrapper = styled.div`\r\n      display: grid;\r\n      position: absolute;\r\n      grid-template-columns:  20%  20%  20%  40%;\r\n      grid-template-rows:  10% 90%;\r\n      grid-template-areas:   \"header header header header\" \r\n                             \"countries cities company mapcont\";\r\n      height: 55%;\r\n      width: 80%;\r\n      background-color: ${whiteColor};\r\n      border-radius: 10px;\r\n      box-shadow: 0 0px 20px 0 rgba(0, 0, 0, 0.2), 0 0px 20px 0 rgba(0, 0, 0, 0.19);\r\n`\r\nexport const Header = styled.div`\r\n      font-size: 1.2rem;\r\n      font-weight: 600;\r\n      border-bottom: 1px solid ${borderColor};\r\n      padding-left: 0.4rem;\r\n      align-self: flex-end;\r\n`\r\nexport const MapCont = styled.div`\r\n      width: 100%;\r\n      grid-column: 4;\r\n      grid-row: 2;  \r\n      position: relative; \r\n      border: 10px solid ${whiteColor};\r\n      border-top: 0;\r\n      border-bottom-right-radius: 10px;\r\n`\r\nexport const List = styled.ul`\r\n\toverflow-x: hidden;\r\n      overflow-y: scroll;\r\n`\r\nexport const ListItem =styled.li`\r\n      color: ${blueColor};\r\n      font-size: 1rem;\r\n      line-height: 3;\r\n      opacity: 0.8;\r\n      padding-left: 10px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      padding-right: 10px;\r\n      white-space: nowrap;\r\n      cursor: pointer;\r\n\r\n\r\n      :hover{\r\n            background-color: ${blueColor};\r\n            border-radius: 10px;\r\n            color: ${whiteColor};\r\n      }\r\n`\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react'\r\n\r\n\r\nconst mapApi = process.env.REACT_APP_KEY_MAP_API\r\nconst mapGeoApi = process.env.REACT_APP_KEY_MAP_GEO_API\r\n\r\n\r\nclass MapContainer extends Component {\r\n\r\n  state = {\r\n    center: {},\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.getLatLng()\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      this.getLatLng()\r\n    }\r\n  }\r\n\r\n  getLatLng() {\r\n    const url = 'https://maps.googleapis.com/maps/api/geocode/json';\r\n    axios.get(url, {\r\n      params: {\r\n        address: this.props.location,\r\n        key: mapGeoApi\r\n      }\r\n    })\r\n      .then(res => res.data.results[0].geometry.location)\r\n      .then(data => {\r\n        this.setState({\r\n          center: data\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { center } = this.state\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        center={center}\r\n        zoom={17}\r\n      >\r\n        <Marker position={center} />\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (mapApi)\r\n})(MapContainer)","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport { ContWrapper, Header, MapCont, List, ListItem } from './Container.styles'\r\nimport MapContainer from '../Map/MapContainer'\r\n\r\nclass Container extends Component {\r\n\r\n\r\n   state = {\r\n      countries: [],\r\n      cities: [],\r\n      companies: [],\r\n      getLocation: ''\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.loadData()\r\n   }\r\n\r\n   loadData = () => {\r\n      const clientsApi = \"https://raw.githubusercontent.com/SejoB/sort-customers-list/master/public/data/clients.json\"\r\n      axios.get(clientsApi)\r\n         .then((response) => response.data)\r\n         .then((data) => {\r\n            return {\r\n               countries: this.sortData(data.Customers, 'Country', 'City', -1),\r\n               cities:    this.groupeCities(data.Customers),\r\n               companies: this.groupeCompanies(data.Customers),\r\n               data:      data.Customers\r\n            }\r\n         })\r\n         .then((customers) => {\r\n            this.customers = {\r\n                  cities:    customers.cities,\r\n                  companies: customers.companies,\r\n                  data:      customers.data\r\n            }\r\n            let firstCountry = customers.countries[0][0],\r\n                firstCities  = customers.cities[firstCountry]\r\n            this.setState(\r\n               {\r\n                  countries:   this.renderListCountries(customers.countries),\r\n                  cities:      this.renderListCities(firstCities),\r\n                  companies:   this.renderListCompanies(customers.companies[firstCities[0]]),\r\n                  getLocation: this.renderMapContainer(customers.companies[firstCities[0]][0])\r\n               }\r\n            )\r\n         })\r\n         .catch((err) => { console.log(err) })\r\n   }\r\n\r\n   sortData = (data, resProp, sortProp, sortOrder = 1) => {\r\n      let obj = {}\r\n      data.forEach(i => {\r\n         let k = i[resProp]\r\n         if (k in obj) {\r\n            obj[k].add(i[sortProp])\r\n         } else {\r\n            obj[k] = new Set()\r\n         }\r\n      })\r\n      for (let n in obj) {\r\n         obj[n] = Array.from(obj[n]).length\r\n      }\r\n      obj = Object.entries(obj)\r\n      obj.sort((a, b) => (a[1] - b[1]) * sortOrder)\r\n      return obj\r\n   }\r\n   groupeCities = (data) => {\r\n      const arrCities = this.sortData(data, 'City', 'Company', -1)\r\n      let obj = {}\r\n      data.forEach(i => {\r\n         let k = i['Country'],\r\n             j = i['City']\r\n         if (k in obj) {\r\n            obj[k].add(j)\r\n         } else {\r\n            obj[k] = new Set()\r\n            obj[k].add(j)\r\n         }\r\n      })\r\n      for (let n in obj) {\r\n         obj[n] = arrCities.filter(city => {\r\n            return Array.from(obj[n]).includes(city[0])\r\n         }).map(i => i[0])\r\n      }\r\n      return obj\r\n   }\r\n   groupeCompanies = (data) => {\r\n      let obj = {}\r\n      data.forEach(i => {\r\n         let k = i['City'],\r\n             j = i['CompanyName']\r\n         if (k in obj) {\r\n            obj[k].add(j)\r\n         } else {\r\n            obj[k] = new Set()\r\n            obj[k].add(j)\r\n         }\r\n      })\r\n      let tmp\r\n      for (let n in obj) {\r\n         tmp = Array.from(obj[n])\r\n         tmp.sort((a, b) => {\r\n            if (a > b) return 1\r\n            if (a < b) return -1\r\n            return 0\r\n         })\r\n         obj[n] = tmp\r\n      }\r\n      return obj\r\n   }\r\n   showCitiesHandler = (e) => {\r\n      e.persist()\r\n      if (e.target) {\r\n         this.setState({\r\n            cities: this.renderListCities(this.customers.cities[e.target.innerText])\r\n         })\r\n      }\r\n   }\r\n   showCompaniesHandler = (e) => {\r\n      e.persist()\r\n      if (e.target) {\r\n         this.setState({\r\n            companies: this.renderListCompanies(this.customers.companies[e.target.innerText])\r\n         })\r\n      }\r\n   }\r\n   getLocationHandler = (e) => {\r\n      e.persist()\r\n      if (e.target) {\r\n         let tmp\r\n         for (let i = 0; i < this.customers.data.length; i++) {\r\n            tmp = this.customers.data[i]\r\n            if (tmp.CompanyName === e.target.innerHTML) {\r\n               this.setState({\r\n                  getLocation: this.renderMapContainer(tmp.CompanyName)\r\n               })\r\n            }\r\n         }\r\n      }\r\n   }\r\n   renderListCountries = (obj) => {\r\n      return obj.map((a, key) => {\r\n         return <ListItem key={key} onClick={this.showCitiesHandler}>{a[0]}</ListItem>\r\n      })\r\n   }\r\n   renderListCities = (obj) => {\r\n      return obj.map((a, key) => {\r\n         return <ListItem key={key} onClick={this.showCompaniesHandler}>{a}</ListItem>\r\n      })\r\n   }\r\n   renderListCompanies = (obj) => {\r\n      return obj.map((a, key) => {\r\n         return <ListItem key={key} onClick={this.getLocationHandler}>{a}</ListItem>\r\n      })\r\n   }\r\n   renderMapContainer = (company) => {\r\n      let tmp\r\n      for (let i = 0; i < this.customers.data.length; i++) {\r\n         tmp = this.customers.data[i]\r\n         if (tmp.CompanyName === company) {\r\n            let location = [tmp.Address, tmp.Region, tmp.City, tmp.PostalCode, tmp.Country].join(',')\r\n            return <MapContainer location={location} />\r\n         }\r\n      }\r\n   }\r\n   render() {\r\n      const { countries, cities, companies, getLocation } = this.state\r\n      return (\r\n         <ContWrapper>\r\n            <Header>Countries</Header>\r\n            <Header>Cities</Header>\r\n            <Header>Company</Header>\r\n            <Header>Map</Header>\r\n            <List>\r\n               {countries}\r\n            </List>\r\n            <List>\r\n               {cities}\r\n            </List>\r\n            <List>\r\n               {companies}\r\n            </List>\r\n            <MapCont>\r\n               {getLocation}\r\n            </MapCont>\r\n         </ContWrapper>\r\n      )\r\n   }\r\n}\r\n\r\n\r\nexport default Container","import React, { Component } from 'react';\n\nimport GlobalStyle from '../../styled/global.styles'\n\nimport { AppWrapper } from './App.styles'\nimport Container from '../Container/Container'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <AppWrapper>\n          <Container/>\n        </AppWrapper>\n        <GlobalStyle/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}